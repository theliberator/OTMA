/**
 * This class is responsible for parsing xml configuration files (mainly
 * mapEvents.xml, mapLayout.xml and the dynamically loaded otma-config.xml) and
 * extracting level layouts from them.
 *
 * For 'map' members, the final classes used in the game (like npcs, events,
 * etc. are created on the fly. For 'otma' members only the layout is stored.
 * Final classes are later generated by the StoryGenerator class.
 *
 * @author	Michael Seider
 * @version 0.9
 * @since	19.5.2012
 * 
 * Original version 0.9 released on 19.05.2012 by Michael Seider
 * Rewritten on 23.06.2013 by Sebastian Pabel
 *
 * @author	Michael Seider, Sebastian Pabel, Florian Schmidt
 * @version 2.0
 * @since	23.06.2013
 */

// Use Singleton pattern
XMLConfigLoader.getInstance = function()
{
	if (XMLConfigLoader.instance == undefined) 
		XMLConfigLoader.instance = new XMLConfigLoader();
		
	return XMLConfigLoader.instance;
}

function XMLConfigLoader() {
	var configFilename = 'otma-config.xml';
	var layoutFilename = 'mapLayout.xml';
	var mapEventsFilename = 'mapEvents.xml';
	var mapTextsFilename = 'mapTexts.xml';
	
	this.getConfigFilename = function() {
		return configFilename;
	};
	this.getLayoutFilename = function() {
		return layoutFilename;
	};
	this.getMapEventsFilename = function() {
		return mapEventsFilename;
	};
	
	this.getMapTextsFilename = function() {
		return mapTextsFilename;
	};
};
//variables
XMLConfigLoader.prototype.otma = {
	persons: [],
	otma_events: [],
	hints: [],
	texts: {},
	roomsLayoutUpper: [],
	roomsLayoutLower: [],
	entry_teleports: [],
	teleports: []
};

XMLConfigLoader.prototype.map = {
	teleports: {},
	ets: {},
	npcs: [],
	events: {}
};

XMLConfigLoader.prototype.Values = {
	XMLNodeTypeText: 3
};

/**
 * Resets the config loader
 */
XMLConfigLoader.prototype.reset = function() {
	this.otma = {
		persons: [],
		otma_events: [],
		hints: [],
		texts: {},
		roomsLayoutUpper: [],
		roomsLayoutLower: [],
		entry_teleports: [],
		teleports: []
	};
	this.map = {
		teleports: {},
		ets: {},
		npcs: [],
		events: {}
	};
};

/**
 * Loads the otma xml config file
 * @param string path path to the config file
 * @param function callback function that will be called after the load has finished
 */
XMLConfigLoader.prototype.loadOtmaXML = function(path, callback)
{
    var self = this;
    con.debug('loading otma xml file: ' + path + self.getConfigFilename());

	$.get(path + self.getConfigFilename(), function(data) {
		//data contains the xml file as document object. Use $(data) for jquery
		//persons:
		$(data).find('person').each(function() {
			self.otma.persons.push({
				name: $(this).attr('name'),
				title: $(this).attr('title'),
				img: 'img/fotos/' + $(this).attr('name') + '.jpg',
				gender: $(this).attr('gender'),
				introduction: $(this).find('introduction').text()
			});
		});
		
		//events
		$(data).find('conference').each(function() {
			self.otma.otma_events.push({
				type: 'conference',
				title: $(this).attr('title'),
				description: $(this).find('description').text()
			});
		});
		$(data).find('workshop').each(function() {
			self.otma.otma_events.push({
				type: 'workshop',
				title: $(this).attr('title'),
				description: $(this).find('description').text()
			});
		});
		
		//hints
		$(data).find('hint').each(function() {
			self.otma.hints.push({
				title: $(this).attr('title'),
				text: $(this).text()
			});
		});
		
		//otma_info
		$(data).find('otmainfo').each(function() {
			var e = new Event("E_OTMA_INFO");
			var action = {
				type: 'dialog',
				img: 'img/otma_logo_s.jpg',
				text: $(this).text()
			};
			e.addAction(action);
			self.map.events[e.id] = e;
		});
		
		// other texts
		$(data).find('text').each(function() {
			var id = $(this).attr('id');
			self.otma.texts[id] = $(this).text();
		});
		
		callback();
	});
};

/**
 * Loads the map layout related stuff
 * @param string path path to the xml file
 * @param function callback function that will be called after the load has finished
 */
XMLConfigLoader.prototype.loadLayoutXML = function(path, callback)
{
	var self = this;
	con.debug('loading layout xml file: ' + path + self.getLayoutFilename());

	$.get(path + self.getLayoutFilename(), function(data) {
		//data contains the xml file as document object. Use $(data) for jquery
		//npcs
		$(data).find('npc').each(function() {
			var npc = new NPC(
					$(this).attr('id'),
					$(this).attr('class'),
					$(this).attr('name'),
					{
						x: parseInt($(this).attr('x')),
						y: parseInt($(this).attr('y')),
					},
					$(this).attr('direction'),
					$(this).attr('npc_typ'),
					$(this).attr('te_mode')
				);
			
			$(this).find('talkevent').each(function() {
				npc.addEvent({
						id: $(this).attr('id'),
						condition: $(this).attr('condition')
					});
			});
			
			self.map.npcs[npc.id] = npc;
		});
		
		//teleports
		$(data).find('teleport').each(function() {
			var teleport = new Teleport(
					$(this).attr('id'),
					{
						x: parseInt($(this).attr('from').split(',')[0]),
						y: parseInt($(this).attr('from').split(',')[1]),
						z: parseInt($(this).attr('from').split(',')[2])
					},
					{
						x: parseInt($(this).attr('to').split(',')[0]),
						y: parseInt($(this).attr('to').split(',')[1]),
						z: parseInt($(this).attr('to').split(',')[2])
					},
					$(this).attr('direction'),
					$(this).attr('onwalkover')
				);
			
			$(this).find('event').each(function() {
				teleport.addEvent({
						id: $(this).attr('id'),
						condition: $(this).attr('condition')
					});
			});
			
			self.map.teleports[teleport.id] = teleport;
		});
		
		//eventTriggers
		$(data).find('eventtrigger').each(function() {
			var eventTrigger = new EventTrigger(
					$(this).attr('id'),
					{
						x: parseInt($(this).attr('x')),
						y: parseInt($(this).attr('y'))
					},
					$(this).attr('onwalkover')
				);
			
			$(this).find('event').each(function() {
				eventTrigger.addEvent({
					id: $(this).attr('id'),
					condition: $(this).attr('condition')
				});
			});
			
			self.map.ets[eventTrigger.id] = eventTrigger;
		});
		
		//room layout
		$(data).find('entry_tp').each(function() {
			self.otma.entry_teleports.push({
				id: $(this).attr('id')
			});
		});
		$(data).find('stairs').each(function() {
			self.otma.teleports.push({
				from: {
					x: parseInt($(this).attr('from').split(',')[0]),
					y: parseInt($(this).attr('from').split(',')[1]),
					z: parseInt($(this).attr('from').split(',')[2])
				},
				to: {
					x: parseInt($(this).attr('to').split(',')[0]),
					y: parseInt($(this).attr('to').split(',')[1]),
					z: parseInt($(this).attr('to').split(',')[2])
				},
				direction: $(this).attr('direction'),
				level: $(this).attr('level'),
			});
		});
		$(data).find('room').each(function() {
			var room = {
				nr: $(this).attr('nr'),
				chairs: []
			};
			
			$(this).find('chair').each(function() {
				room.chairs.push({
					pos: {
						x: parseInt($(this).attr('pos').split(',')[0]),
						y: parseInt($(this).attr('pos').split(',')[1]),
						z: parseInt($(this).attr('pos').split(',')[2])
					}
				})
			});
			
			if (room.nr == 'otma') {
				self.otma.roomsLayoutLower.push(room);
			} else {
				room.door_in = {
						from: {
							x: parseInt($(this).find('door_in').attr('from').split(',')[0]),
							y: parseInt($(this).find('door_in').attr('from').split(',')[1]),
							z: parseInt($(this).find('door_in').attr('from').split(',')[2])
						},
						to: {
							x: parseInt($(this).find('door_in').attr('to').split(',')[0]),
							y: parseInt($(this).find('door_in').attr('to').split(',')[1]),
							z: parseInt($(this).find('door_in').attr('to').split(',')[2])
						},
						direction: $(this).find('door_in').attr('direction')
				};
				room.door_out = {
						from: {
							x: parseInt($(this).find('door_out').attr('from').split(',')[0]),
							y: parseInt($(this).find('door_out').attr('from').split(',')[1]),
							z: parseInt($(this).find('door_out').attr('from').split(',')[2])
						},
						to: {
							x: parseInt($(this).find('door_out').attr('to').split(',')[0]),
							y: parseInt($(this).find('door_out').attr('to').split(',')[1]),
							z: parseInt($(this).find('door_out').attr('to').split(',')[2])
						},
						direction: $(this).find('door_out').attr('direction')
				};
				room.lecturer = {
						pos: {
							x: parseInt($(this).find('lecturer').attr('pos').split(',')[0]),
							y: parseInt($(this).find('lecturer').attr('pos').split(',')[1]),
							z: parseInt($(this).find('lecturer').attr('pos').split(',')[2])
						}
				};
				self.otma.roomsLayoutUpper.push(room);
			}
		});
		callback();
	});
};

/* Load and parse map events related stuff. */
XMLConfigLoader.prototype.loadEventsXML = function(path, callback)
{
	var self = this;
	con.debug('loading event xml file: ' + path + self.getMapEventsFilename());

	$.get(path + self.getMapEventsFilename(), function(data) {
		//data contains the xml file as document object. Use $(data) for jquery
		//events
		$(data).find('event').each(function() {
			var event = new Event($(this).attr('id'));
			
			$(this).find('action').each(function() {
				var action = {
					type: $(this).attr('type'),
					value: $(this).attr('value'),
					headline: $(this).attr('headline'),
					img: $(this).attr('img'),
					to: {
    					x: ($(this).attr('to') != undefined ? parseInt($(this).attr('to').split(',')[0]) : null),
    					y: ($(this).attr('to') != undefined ? parseInt($(this).attr('to').split(',')[1]) : null),
    					z: ($(this).attr('to') != undefined ? parseInt($(this).attr('to').split(',')[2]) : null)
    				},
    				direction: $(this).attr('direction'),
    				text: []
				};
//				if (this.firstChild != null) {
					if(action.type == 'dialog') {
						action.text = this.firstChild.data;
					} else {
						$(this).find('text').each(function() {
							action.text.push($(this).text());
						});
					}
//				}
				event.addAction(action);
			});
			self.map.events[event.id] = event;
		});
		callback();
	});
	
};